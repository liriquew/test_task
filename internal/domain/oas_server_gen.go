// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// Health implements health operation.
	//
	// GET /ping
	Health(ctx context.Context) error
	// ServiceCreateUser implements Service_createUser operation.
	//
	// POST /users/
	ServiceCreateUser(ctx context.Context, req *User) (ServiceCreateUserRes, error)
	// ServiceDeleteUser implements Service_deleteUser operation.
	//
	// DELETE /users/{userId}
	ServiceDeleteUser(ctx context.Context, params ServiceDeleteUserParams) (ServiceDeleteUserRes, error)
	// ServiceGetUser implements Service_getUser operation.
	//
	// GET /users/{userId}
	ServiceGetUser(ctx context.Context, params ServiceGetUserParams) (ServiceGetUserRes, error)
	// ServiceListUsers implements Service_listUsers operation.
	//
	// GET /users/
	ServiceListUsers(ctx context.Context) (ServiceListUsersRes, error)
	// ServicePatchUser implements Service_patchUser operation.
	//
	// PATCH /users/{userId}
	ServicePatchUser(ctx context.Context, req *User, params ServicePatchUserParams) (ServicePatchUserRes, error)
	// ServicePutUser implements Service_putUser operation.
	//
	// PUT /users/{userId}
	ServicePutUser(ctx context.Context, req *User, params ServicePutUserParams) (ServicePutUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
