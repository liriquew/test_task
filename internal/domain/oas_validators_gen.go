// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *AlreadyExists) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Message.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if err := func() error {
		if s.Details == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "details",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AlreadyExistsCode) Validate() error {
	switch s {
	case 409:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AlreadyExistsMessage) Validate() error {
	switch s {
	case "already exists":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Forbidden) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Message.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ForbiddenCode) Validate() error {
	switch s {
	case 403:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ForbiddenMessage) Validate() error {
	switch s {
	case "forbidden, admin permission required":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *InternalServerError) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Message.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s InternalServerErrorCode) Validate() error {
	switch s {
	case 500:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s InternalServerErrorMessage) Validate() error {
	switch s {
	case "internal server error":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *NotFound) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Message.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s NotFoundCode) Validate() error {
	switch s {
	case 404:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s NotFoundMessage) Validate() error {
	switch s {
	case "not found":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ServiceListUsersOKApplicationJSON) Validate() error {
	alias := ([]User)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *ValidationError) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Message.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if err := func() error {
		if s.Details == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "details",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ValidationErrorCode) Validate() error {
	switch s {
	case 400:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ValidationErrorMessage) Validate() error {
	switch s {
	case "bad params":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
