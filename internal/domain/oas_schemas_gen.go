// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/AlreadyExistsResponse
type AlreadyExistsResponse struct {
	Message AlreadyExistsResponseMessage `json:"message"`
}

// GetMessage returns the value of Message.
func (s *AlreadyExistsResponse) GetMessage() AlreadyExistsResponseMessage {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *AlreadyExistsResponse) SetMessage(val AlreadyExistsResponseMessage) {
	s.Message = val
}

func (*AlreadyExistsResponse) serviceCreateUserRes() {}
func (*AlreadyExistsResponse) servicePatchUserRes()  {}
func (*AlreadyExistsResponse) servicePutUserRes()    {}

type AlreadyExistsResponseMessage string

const (
	AlreadyExistsResponseMessageAlreadyExistsUsernameTaken AlreadyExistsResponseMessage = "already exists, username taken"
	AlreadyExistsResponseMessageAlreadyExistsEmailTaken    AlreadyExistsResponseMessage = "already exists, email taken"
)

// AllValues returns all AlreadyExistsResponseMessage values.
func (AlreadyExistsResponseMessage) AllValues() []AlreadyExistsResponseMessage {
	return []AlreadyExistsResponseMessage{
		AlreadyExistsResponseMessageAlreadyExistsUsernameTaken,
		AlreadyExistsResponseMessageAlreadyExistsEmailTaken,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AlreadyExistsResponseMessage) MarshalText() ([]byte, error) {
	switch s {
	case AlreadyExistsResponseMessageAlreadyExistsUsernameTaken:
		return []byte(s), nil
	case AlreadyExistsResponseMessageAlreadyExistsEmailTaken:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AlreadyExistsResponseMessage) UnmarshalText(data []byte) error {
	switch AlreadyExistsResponseMessage(data) {
	case AlreadyExistsResponseMessageAlreadyExistsUsernameTaken:
		*s = AlreadyExistsResponseMessageAlreadyExistsUsernameTaken
		return nil
	case AlreadyExistsResponseMessageAlreadyExistsEmailTaken:
		*s = AlreadyExistsResponseMessageAlreadyExistsEmailTaken
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BasicAuth struct {
	Username string
	Password string
	Roles    []string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// GetRoles returns the value of Roles.
func (s *BasicAuth) GetRoles() []string {
	return s.Roles
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// SetRoles sets the value of Roles.
func (s *BasicAuth) SetRoles(val []string) {
	s.Roles = val
}

// Ref: #/components/schemas/ForbiddenResponse
type ForbiddenResponse struct {
	Message ForbiddenResponseMessage `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ForbiddenResponse) GetMessage() ForbiddenResponseMessage {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ForbiddenResponse) SetMessage(val ForbiddenResponseMessage) {
	s.Message = val
}

func (*ForbiddenResponse) serviceCreateUserRes() {}
func (*ForbiddenResponse) serviceDeleteUserRes() {}
func (*ForbiddenResponse) serviceGetUserRes()    {}
func (*ForbiddenResponse) servicePatchUserRes()  {}
func (*ForbiddenResponse) servicePutUserRes()    {}

type ForbiddenResponseMessage string

const (
	ForbiddenResponseMessageForbiddenAdminPermissionRequired ForbiddenResponseMessage = "forbidden, admin permission required"
)

// AllValues returns all ForbiddenResponseMessage values.
func (ForbiddenResponseMessage) AllValues() []ForbiddenResponseMessage {
	return []ForbiddenResponseMessage{
		ForbiddenResponseMessageForbiddenAdminPermissionRequired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ForbiddenResponseMessage) MarshalText() ([]byte, error) {
	switch s {
	case ForbiddenResponseMessageForbiddenAdminPermissionRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ForbiddenResponseMessage) UnmarshalText(data []byte) error {
	switch ForbiddenResponseMessage(data) {
	case ForbiddenResponseMessageForbiddenAdminPermissionRequired:
		*s = ForbiddenResponseMessageForbiddenAdminPermissionRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HealthOK is response for Health operation.
type HealthOK struct{}

// Ref: #/components/schemas/InternalErrorResponse
type InternalErrorResponse struct {
	Message InternalErrorResponseMessage `json:"message"`
}

// GetMessage returns the value of Message.
func (s *InternalErrorResponse) GetMessage() InternalErrorResponseMessage {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *InternalErrorResponse) SetMessage(val InternalErrorResponseMessage) {
	s.Message = val
}

func (*InternalErrorResponse) serviceCreateUserRes() {}
func (*InternalErrorResponse) serviceDeleteUserRes() {}
func (*InternalErrorResponse) serviceGetUserRes()    {}
func (*InternalErrorResponse) serviceListUsersRes()  {}
func (*InternalErrorResponse) servicePatchUserRes()  {}
func (*InternalErrorResponse) servicePutUserRes()    {}

type InternalErrorResponseMessage string

const (
	InternalErrorResponseMessageInternalServerError InternalErrorResponseMessage = "internal server error"
)

// AllValues returns all InternalErrorResponseMessage values.
func (InternalErrorResponseMessage) AllValues() []InternalErrorResponseMessage {
	return []InternalErrorResponseMessage{
		InternalErrorResponseMessageInternalServerError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InternalErrorResponseMessage) MarshalText() ([]byte, error) {
	switch s {
	case InternalErrorResponseMessageInternalServerError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InternalErrorResponseMessage) UnmarshalText(data []byte) error {
	switch InternalErrorResponseMessage(data) {
	case InternalErrorResponseMessageInternalServerError:
		*s = InternalErrorResponseMessageInternalServerError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NotFoundResponse
type NotFoundResponse struct {
	Message NotFoundResponseMessage `json:"message"`
}

// GetMessage returns the value of Message.
func (s *NotFoundResponse) GetMessage() NotFoundResponseMessage {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *NotFoundResponse) SetMessage(val NotFoundResponseMessage) {
	s.Message = val
}

func (*NotFoundResponse) serviceGetUserRes() {}

type NotFoundResponseMessage string

const (
	NotFoundResponseMessageNotFound NotFoundResponseMessage = "not found"
)

// AllValues returns all NotFoundResponseMessage values.
func (NotFoundResponseMessage) AllValues() []NotFoundResponseMessage {
	return []NotFoundResponseMessage{
		NotFoundResponseMessageNotFound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NotFoundResponseMessage) MarshalText() ([]byte, error) {
	switch s {
	case NotFoundResponseMessageNotFound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NotFoundResponseMessage) UnmarshalText(data []byte) error {
	switch NotFoundResponseMessage(data) {
	case NotFoundResponseMessageNotFound:
		*s = NotFoundResponseMessageNotFound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional UUID.
type OptUUID struct {
	Value UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d UUID) UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// ServiceDeleteUserOK is response for ServiceDeleteUser operation.
type ServiceDeleteUserOK struct{}

func (*ServiceDeleteUserOK) serviceDeleteUserRes() {}

type ServiceListUsersOKApplicationJSON []User

func (*ServiceListUsersOKApplicationJSON) serviceListUsersRes() {}

// ServicePatchUserOK is response for ServicePatchUser operation.
type ServicePatchUserOK struct{}

func (*ServicePatchUserOK) servicePatchUserRes() {}

// ServicePutUserOK is response for ServicePutUser operation.
type ServicePutUserOK struct{}

func (*ServicePutUserOK) servicePutUserRes() {}

type UUID uuid.UUID

// User model all fields isn't required
// - `id`: the uuid
// - `username`: the user's name
// - `password`: the user's password, returned like a base64 string
// - `email`: the user's email
// - `is_admin`: define user permissions.
// Ref: #/components/schemas/User
type User struct {
	ID       OptUUID   `json:"id" db:"id"`
	Username OptString `json:"username" db:"username"`
	Password OptString `json:"password" db:"password"`
	Email    OptString `json:"email" db:"email"`
	IsAdmin  OptBool   `json:"is_admin" db:"is_admin"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptUUID {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *User) GetPassword() OptString {
	return s.Password
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetIsAdmin returns the value of IsAdmin.
func (s *User) GetIsAdmin() OptBool {
	return s.IsAdmin
}

// SetID sets the value of ID.
func (s *User) SetID(val OptUUID) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *User) SetPassword(val OptString) {
	s.Password = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetIsAdmin sets the value of IsAdmin.
func (s *User) SetIsAdmin(val OptBool) {
	s.IsAdmin = val
}

func (*User) serviceCreateUserRes() {}
func (*User) serviceGetUserRes()    {}

// Ref: #/components/schemas/ValidationErrorResponse
type ValidationErrorResponse struct {
	Message ValidationErrorResponseMessage `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ValidationErrorResponse) GetMessage() ValidationErrorResponseMessage {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ValidationErrorResponse) SetMessage(val ValidationErrorResponseMessage) {
	s.Message = val
}

func (*ValidationErrorResponse) serviceCreateUserRes() {}
func (*ValidationErrorResponse) serviceDeleteUserRes() {}
func (*ValidationErrorResponse) serviceGetUserRes()    {}
func (*ValidationErrorResponse) servicePatchUserRes()  {}
func (*ValidationErrorResponse) servicePutUserRes()    {}

type ValidationErrorResponseMessage string

const (
	ValidationErrorResponseMessageBadParams ValidationErrorResponseMessage = "bad params"
)

// AllValues returns all ValidationErrorResponseMessage values.
func (ValidationErrorResponseMessage) AllValues() []ValidationErrorResponseMessage {
	return []ValidationErrorResponseMessage{
		ValidationErrorResponseMessageBadParams,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ValidationErrorResponseMessage) MarshalText() ([]byte, error) {
	switch s {
	case ValidationErrorResponseMessageBadParams:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ValidationErrorResponseMessage) UnmarshalText(data []byte) error {
	switch ValidationErrorResponseMessage(data) {
	case ValidationErrorResponseMessageBadParams:
		*s = ValidationErrorResponseMessageBadParams
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
