// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/AlreadyExists
type AlreadyExists struct {
	Code    AlreadyExistsCode    `json:"code"`
	Message AlreadyExistsMessage `json:"message"`
	Details []string             `json:"details"`
}

// GetCode returns the value of Code.
func (s *AlreadyExists) GetCode() AlreadyExistsCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *AlreadyExists) GetMessage() AlreadyExistsMessage {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *AlreadyExists) GetDetails() []string {
	return s.Details
}

// SetCode sets the value of Code.
func (s *AlreadyExists) SetCode(val AlreadyExistsCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *AlreadyExists) SetMessage(val AlreadyExistsMessage) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *AlreadyExists) SetDetails(val []string) {
	s.Details = val
}

func (*AlreadyExists) serviceCreateUserRes() {}
func (*AlreadyExists) servicePatchUserRes()  {}
func (*AlreadyExists) servicePutUserRes()    {}

type AlreadyExistsCode float64

const (
	AlreadyExistsCode409 AlreadyExistsCode = 409
)

// AllValues returns all AlreadyExistsCode values.
func (AlreadyExistsCode) AllValues() []AlreadyExistsCode {
	return []AlreadyExistsCode{
		AlreadyExistsCode409,
	}
}

type AlreadyExistsMessage string

const (
	AlreadyExistsMessageAlreadyExists AlreadyExistsMessage = "already exists"
)

// AllValues returns all AlreadyExistsMessage values.
func (AlreadyExistsMessage) AllValues() []AlreadyExistsMessage {
	return []AlreadyExistsMessage{
		AlreadyExistsMessageAlreadyExists,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AlreadyExistsMessage) MarshalText() ([]byte, error) {
	switch s {
	case AlreadyExistsMessageAlreadyExists:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AlreadyExistsMessage) UnmarshalText(data []byte) error {
	switch AlreadyExistsMessage(data) {
	case AlreadyExistsMessageAlreadyExists:
		*s = AlreadyExistsMessageAlreadyExists
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BasicAuth struct {
	Username string
	Password string
	Roles    []string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// GetRoles returns the value of Roles.
func (s *BasicAuth) GetRoles() []string {
	return s.Roles
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// SetRoles sets the value of Roles.
func (s *BasicAuth) SetRoles(val []string) {
	s.Roles = val
}

// Ref: #/components/schemas/Forbidden
type Forbidden struct {
	Code    ForbiddenCode    `json:"code"`
	Message ForbiddenMessage `json:"message"`
}

// GetCode returns the value of Code.
func (s *Forbidden) GetCode() ForbiddenCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Forbidden) GetMessage() ForbiddenMessage {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Forbidden) SetCode(val ForbiddenCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Forbidden) SetMessage(val ForbiddenMessage) {
	s.Message = val
}

func (*Forbidden) serviceCreateUserRes() {}
func (*Forbidden) serviceDeleteUserRes() {}
func (*Forbidden) serviceGetUserRes()    {}
func (*Forbidden) servicePatchUserRes()  {}
func (*Forbidden) servicePutUserRes()    {}

type ForbiddenCode float64

const (
	ForbiddenCode403 ForbiddenCode = 403
)

// AllValues returns all ForbiddenCode values.
func (ForbiddenCode) AllValues() []ForbiddenCode {
	return []ForbiddenCode{
		ForbiddenCode403,
	}
}

type ForbiddenMessage string

const (
	ForbiddenMessageForbiddenAdminPermissionRequired ForbiddenMessage = "forbidden, admin permission required"
)

// AllValues returns all ForbiddenMessage values.
func (ForbiddenMessage) AllValues() []ForbiddenMessage {
	return []ForbiddenMessage{
		ForbiddenMessageForbiddenAdminPermissionRequired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ForbiddenMessage) MarshalText() ([]byte, error) {
	switch s {
	case ForbiddenMessageForbiddenAdminPermissionRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ForbiddenMessage) UnmarshalText(data []byte) error {
	switch ForbiddenMessage(data) {
	case ForbiddenMessageForbiddenAdminPermissionRequired:
		*s = ForbiddenMessageForbiddenAdminPermissionRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HealthOK is response for Health operation.
type HealthOK struct{}

// Ref: #/components/schemas/InternalServerError
type InternalServerError struct {
	Code    InternalServerErrorCode    `json:"code"`
	Message InternalServerErrorMessage `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() InternalServerErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() InternalServerErrorMessage {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val InternalServerErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val InternalServerErrorMessage) {
	s.Message = val
}

func (*InternalServerError) serviceCreateUserRes() {}
func (*InternalServerError) serviceDeleteUserRes() {}
func (*InternalServerError) serviceGetUserRes()    {}
func (*InternalServerError) serviceListUsersRes()  {}
func (*InternalServerError) servicePatchUserRes()  {}
func (*InternalServerError) servicePutUserRes()    {}

type InternalServerErrorCode float64

const (
	InternalServerErrorCode500 InternalServerErrorCode = 500
)

// AllValues returns all InternalServerErrorCode values.
func (InternalServerErrorCode) AllValues() []InternalServerErrorCode {
	return []InternalServerErrorCode{
		InternalServerErrorCode500,
	}
}

type InternalServerErrorMessage string

const (
	InternalServerErrorMessageInternalServerError InternalServerErrorMessage = "internal server error"
)

// AllValues returns all InternalServerErrorMessage values.
func (InternalServerErrorMessage) AllValues() []InternalServerErrorMessage {
	return []InternalServerErrorMessage{
		InternalServerErrorMessageInternalServerError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InternalServerErrorMessage) MarshalText() ([]byte, error) {
	switch s {
	case InternalServerErrorMessageInternalServerError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InternalServerErrorMessage) UnmarshalText(data []byte) error {
	switch InternalServerErrorMessage(data) {
	case InternalServerErrorMessageInternalServerError:
		*s = InternalServerErrorMessageInternalServerError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NotFound
type NotFound struct {
	Code    NotFoundCode    `json:"code"`
	Message NotFoundMessage `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFound) GetCode() NotFoundCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFound) GetMessage() NotFoundMessage {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFound) SetCode(val NotFoundCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFound) SetMessage(val NotFoundMessage) {
	s.Message = val
}

func (*NotFound) serviceGetUserRes() {}

type NotFoundCode float64

const (
	NotFoundCode404 NotFoundCode = 404
)

// AllValues returns all NotFoundCode values.
func (NotFoundCode) AllValues() []NotFoundCode {
	return []NotFoundCode{
		NotFoundCode404,
	}
}

type NotFoundMessage string

const (
	NotFoundMessageNotFound NotFoundMessage = "not found"
)

// AllValues returns all NotFoundMessage values.
func (NotFoundMessage) AllValues() []NotFoundMessage {
	return []NotFoundMessage{
		NotFoundMessageNotFound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NotFoundMessage) MarshalText() ([]byte, error) {
	switch s {
	case NotFoundMessageNotFound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NotFoundMessage) UnmarshalText(data []byte) error {
	switch NotFoundMessage(data) {
	case NotFoundMessageNotFound:
		*s = NotFoundMessageNotFound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional UUID.
type OptUUID struct {
	Value UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d UUID) UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// ServiceDeleteUserOK is response for ServiceDeleteUser operation.
type ServiceDeleteUserOK struct{}

func (*ServiceDeleteUserOK) serviceDeleteUserRes() {}

type ServiceListUsersOKApplicationJSON []User

func (*ServiceListUsersOKApplicationJSON) serviceListUsersRes() {}

// ServicePatchUserOK is response for ServicePatchUser operation.
type ServicePatchUserOK struct{}

func (*ServicePatchUserOK) servicePatchUserRes() {}

// ServicePutUserOK is response for ServicePutUser operation.
type ServicePutUserOK struct{}

func (*ServicePutUserOK) servicePutUserRes() {}

type UUID uuid.UUID

// Ref: #/components/schemas/User
type User struct {
	ID       OptUUID   `json:"id" db:"id"`
	Username OptString `json:"username" db:"username"`
	Password OptString `json:"password" db:"password"`
	Email    OptString `json:"email" db:"email"`
	IsAdmin  OptBool   `json:"is_admin" db:"is_admin"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptUUID {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *User) GetPassword() OptString {
	return s.Password
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetIsAdmin returns the value of IsAdmin.
func (s *User) GetIsAdmin() OptBool {
	return s.IsAdmin
}

// SetID sets the value of ID.
func (s *User) SetID(val OptUUID) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *User) SetPassword(val OptString) {
	s.Password = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetIsAdmin sets the value of IsAdmin.
func (s *User) SetIsAdmin(val OptBool) {
	s.IsAdmin = val
}

func (*User) serviceCreateUserRes() {}
func (*User) serviceGetUserRes()    {}

// Ref: #/components/schemas/ValidationError
type ValidationError struct {
	Code    ValidationErrorCode    `json:"code"`
	Message ValidationErrorMessage `json:"message"`
	Details []string               `json:"details"`
}

// GetCode returns the value of Code.
func (s *ValidationError) GetCode() ValidationErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ValidationError) GetMessage() ValidationErrorMessage {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *ValidationError) GetDetails() []string {
	return s.Details
}

// SetCode sets the value of Code.
func (s *ValidationError) SetCode(val ValidationErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ValidationError) SetMessage(val ValidationErrorMessage) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *ValidationError) SetDetails(val []string) {
	s.Details = val
}

func (*ValidationError) serviceCreateUserRes() {}
func (*ValidationError) serviceDeleteUserRes() {}
func (*ValidationError) serviceGetUserRes()    {}
func (*ValidationError) servicePatchUserRes()  {}
func (*ValidationError) servicePutUserRes()    {}

type ValidationErrorCode float64

const (
	ValidationErrorCode400 ValidationErrorCode = 400
)

// AllValues returns all ValidationErrorCode values.
func (ValidationErrorCode) AllValues() []ValidationErrorCode {
	return []ValidationErrorCode{
		ValidationErrorCode400,
	}
}

type ValidationErrorMessage string

const (
	ValidationErrorMessageBadParams ValidationErrorMessage = "bad params"
)

// AllValues returns all ValidationErrorMessage values.
func (ValidationErrorMessage) AllValues() []ValidationErrorMessage {
	return []ValidationErrorMessage{
		ValidationErrorMessageBadParams,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ValidationErrorMessage) MarshalText() ([]byte, error) {
	switch s {
	case ValidationErrorMessageBadParams:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ValidationErrorMessage) UnmarshalText(data []byte) error {
	switch ValidationErrorMessage(data) {
	case ValidationErrorMessageBadParams:
		*s = ValidationErrorMessageBadParams
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
